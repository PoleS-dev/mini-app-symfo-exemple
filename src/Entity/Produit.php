<?php

declare(strict_types=1); // Active le typage strict : cela √©vite des erreurs de type inattendues

namespace App\Entity;

use App\Repository\ProduitRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

// Cette classe repr√©sente une entit√© Doctrine, c‚Äôest-√†-dire une table dans la base de donn√©es.
// Elle est li√©e √† la table "produit" via le repository ProduitRepository.
#[ORM\Entity(repositoryClass: ProduitRepository::class)]
class Produit
{
    // Identifiant unique du produit, cl√© primaire dans la base de donn√©es.
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    // Nom du produit (VARCHAR 255 en base de donn√©es).
    #[ORM\Column(length: 255)]
    private ?string $nom = null;

    // Le produit appartient √† une cat√©gorie.
    // C‚Äôest une relation ManyToOne (plusieurs produits peuvent avoir la m√™me cat√©gorie).
    #[ORM\ManyToOne(targetEntity: Category::class, inversedBy: 'produits')]
    private ?Category $category = null;
    // pas Collection car  chaque produit est li√© √† une seule cat√©gorie.

    // Description du produit (VARCHAR 255).
    #[ORM\Column(length: 255)]
    private ?string $description = null;

    // Nom du fichier image associ√© au produit (peut √™tre null).
    #[ORM\Column(length: 255, nullable: true)]
    private ?string $img = null;

    // Prix du produit (type float).
    #[ORM\Column]
    private ?float $prix = null;

    // Liste des paniers contenant ce produit.
    // Relation OneToMany : un produit peut √™tre dans plusieurs paniers.
    #[ORM\OneToMany(targetEntity: Panier::class, mappedBy: 'produit')]
    private Collection $paniers; // Collection est une interface donc avec des methodes vide
//     Doctrine ne peut pas utiliser des tableaux PHP (array) pour ses relations car ils sont trop limit√©s.

// $paniers est un objet de type Collection (souvent un ArrayCollection)
// $panier est un objet de type Panier, une seule instance

// Avec Collection, on a plein de m√©thodes pratiques comme :

// add()

// removeElement()

// contains()

// filter()

// map()

// etc.

    // Liste des lignes de commande li√©es √† ce produit.
    // orphanRemoval supprime les lignes orphelines automatiquement.
    // cascade remove supprime les lignes quand le produit est supprim√©.
    #[ORM\OneToMany(targetEntity: LigneCommande::class, mappedBy: 'produit', orphanRemoval: true, cascade: ['remove'])]
    private Collection $ligneCommandes;

    // Stock disponible pour ce produit (peut √™tre null).
    #[ORM\Column(nullable: true)]
    private ?int $stock = null;

    // Constructeur : initialise les collections de relations (important pour √©viter les erreurs).
    public function __construct()
    {
        $this->paniers = new ArrayCollection();
        $this->ligneCommandes = new ArrayCollection();
    }

    // --- Getters et setters pour acc√©der et modifier les propri√©t√©s ---

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getNom(): ?string
    {
        return $this->nom;
    }

    public function setNom(string $nom): static
    {
        $this->nom = $nom;
        return $this;
    }

    public function getCategory(): ?Category
    {
        return $this->category;
    }

    public function setCategory(?Category $category): static
    {
        $this->category = $category;
        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): static
    {
        $this->description = $description;
        return $this;
    }

    public function getImg(): ?string
    {
        return $this->img;
    }

    public function setImg(?string $img): static
    {
        $this->img = $img;
        return $this;
    }

    public function getPrix(): ?float
    {
        return $this->prix;
    }

    public function setPrix(float $prix): static
    {
        $this->prix = $prix;
        return $this;
    }

    /**
     * Retourne la liste des paniers contenant ce produit.
     * @return Collection<int, Panier>
     */
    public function getPaniers(): Collection
    {
        return $this->paniers;
    }

    /**
     * Ajoute un panier √† la liste si ce n‚Äôest pas d√©j√† fait.
     */
    public function addPanier(Panier $panier): static
    {
        if (!$this->paniers->contains($panier)) {
            $this->paniers->add($panier);
            $panier->setProduit($this); // Met √† jour l‚Äôautre c√¥t√© de la relation
        }

        return $this;
    }

    /**
     * Supprime un panier de la liste.
     */
    public function removePanier(Panier $panier): static
    {
        if ($this->paniers->removeElement($panier)) {
            if ($panier->getProduit() === $this) {
                $panier->setProduit(null); // D√©connecte l'association
            }
        }

        return $this;
    }

//     $this->paniers est une Collection d‚Äôobjets Panier.
// removeElement() est une m√©thode de Doctrine (via ArrayCollection) qui :
// Retire l‚Äôobjet $panier de la collection s‚Äôil est pr√©sent.
// Retourne true si √ßa a fonctionn√©, sinon false.
// On casse le lien c√¥t√© inverse, c‚Äôest-√†-dire dans le Panier.
// On met la propri√©t√© produit du panier √† null, pour dire :
// ¬´ Ce panier ne contient plus aucun produit. ¬ª
// üí° Doctrine a besoin que les deux c√¥t√©s soient mis √† jour dans une relation bidirectionnelle (OneToMany ‚Üî ManyToOne),
//  sinon la base ne sera pas synchronis√©e correctement.




    /**
     * Retourne la liste des lignes de commande contenant ce produit.
     * @return Collection<int, LigneCommande>
     */
    public function getLigneCommandes(): Collection
    {
        return $this->ligneCommandes;
    }

    /**
     * Ajoute une ligne de commande √† la liste.
     */
    public function addLigneCommande(LigneCommande $ligneCommande): static
    {
        if (!$this->ligneCommandes->contains($ligneCommande)) {
            $this->ligneCommandes->add($ligneCommande);
            $ligneCommande->setProduit($this);
        }

        return $this;
    }

    /**
     * Supprime une ligne de commande de la liste.
     */
    // public function addLigneCommande(LigneCommande $ligneCommande): static
// C‚Äôest une m√©thode publique (accessible depuis l‚Äôext√©rieur de la classe).

// Elle prend un objet LigneCommande en param√®tre.

// Elle retourne static : cela signifie qu‚Äôelle retourne l‚Äôobjet courant ($this), ce qui permet de cha√Æner les appels (ex : $produit->addLigneCommande(...)->setPrix(10.5);).

// if (!$this->ligneCommandes->contains($ligneCommande)) {
// $this->ligneCommandes est une collection d‚Äôobjets LigneCommande (instanci√©e dans le constructeur avec ArrayCollection).

// On v√©rifie si cette ligne de commande n‚Äôest pas d√©j√† dans la collection.

// Cela √©vite d‚Äôajouter deux fois le m√™me objet.

// $this->ligneCommandes->add($ligneCommande);
// On ajoute la ligne de commande √† la collection du produit.

// Cela met √† jour la relation c√¥t√© Produit (le c√¥t√© "One").

// $ligneCommande->setProduit($this);
// Ici, on met √† jour la relation inverse, c‚Äôest-√†-dire le c√¥t√© "Many" de la relation.

// Chaque LigneCommande contient une propri√©t√© produit, donc on lui dit : ¬´ Ton produit, c‚Äôest moi ($this) ¬ª.

// Cela garantit que Doctrine conna√Ætra les deux c√¥t√©s de la relation.

// üëâ En Doctrine, il est important de g√©rer les deux c√¥t√©s d'une relation bidirectionnelle, sinon les changements ne seront pas correctement persist√©s.

// return $this;
// On retourne l‚Äôinstance courante (Produit), pour permettre le cha√Ænage fluide (fluent interface).
    public function removeLigneCommande(LigneCommande $ligneCommande): static
    {
        if ($this->ligneCommandes->removeElement($ligneCommande)) {
            if ($ligneCommande->getProduit() === $this) {
                $ligneCommande->setProduit(null);
            }
        }

        return $this;
    }

    public function getStock(): ?int
    {
        return $this->stock;
    }

    public function setStock(?int $stock): static
    {
        $this->stock = $stock;
        return $this;
    }
}


// M√©thodes courantes de ArrayCollection
// Voici les m√©thodes les plus utiles que tu retrouveras dans les projets Symfony :


// add($element)	Ajoute un √©l√©ment dans la collection
// removeElement($element)	Supprime un √©l√©ment s‚Äôil est pr√©sent
// contains($element)	V√©rifie si l‚Äô√©l√©ment est dans la collection
// isEmpty()	V√©rifie si la collection est vide
// toArray()	Retourne un tableau PHP classique
// filter(Closure $p)	Retourne une sous-collection selon une condition
// map(Closure $f)	Applique une fonction √† chaque √©l√©ment
// first() / last()	Retourne le premier ou dernier √©l√©ment
